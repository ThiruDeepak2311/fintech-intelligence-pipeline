{"ast":null,"code":"const {\n  Client\n} = require('pg');\nclass DatabaseService {\n  constructor() {\n    // Railway PostgreSQL connection string - hardcoded for deployment\n    this.connectionString = 'postgresql://postgres:vDfzLbuvZxfVjUUgNInZPsHSidoCtHkD@interchange.proxy.rlwy.net:57621/railway';\n    this.client = null;\n  }\n  async connect() {\n    if (!this.connectionString) {\n      throw new Error('Database URL not provided. Set REACT_APP_DATABASE_URL environment variable.');\n    }\n    try {\n      this.client = new Client({\n        connectionString: this.connectionString,\n        ssl: {\n          rejectUnauthorized: false // Required for Railway PostgreSQL\n        }\n      });\n      await this.client.connect();\n      console.log('Connected to PostgreSQL database');\n      return true;\n    } catch (error) {\n      console.error('Database connection failed:', error);\n      throw error;\n    }\n  }\n  async disconnect() {\n    if (this.client) {\n      await this.client.end();\n      this.client = null;\n    }\n  }\n  async getLatestStockData() {\n    /**\r\n     * Get the most recent stock data with AI analysis\r\n     * Returns: Combined stock metrics and AI recommendations\r\n     */\n    try {\n      if (!this.client) await this.connect();\n      const query = `\n        SELECT \n          dm.id,\n          dm.date,\n          dm.symbol,\n          dm.open_price,\n          dm.close_price,\n          dm.high_price,\n          dm.low_price,\n          dm.volume,\n          dm.vwap,\n          dm.transactions,\n          ar.sentiment,\n          ar.risk_score,\n          ar.price_prediction,\n          ar.recommendations,\n          ar.full_analysis,\n          ar.model_used,\n          (dm.close_price - dm.open_price) as price_change,\n          ((dm.close_price - dm.open_price) / dm.open_price * 100) as change_percent\n        FROM daily_metrics dm\n        LEFT JOIN ai_recommendations ar ON dm.id = ar.metrics_id\n        ORDER BY dm.date DESC, dm.id DESC\n        LIMIT 1\n      `;\n      const result = await this.client.query(query);\n      if (result.rows.length === 0) {\n        return null;\n      }\n      const row = result.rows[0];\n      return {\n        id: row.id,\n        date: row.date,\n        symbol: row.symbol,\n        stockData: {\n          open: parseFloat(row.open_price),\n          close: parseFloat(row.close_price),\n          high: parseFloat(row.high_price),\n          low: parseFloat(row.low_price),\n          volume: parseInt(row.volume),\n          vwap: parseFloat(row.vwap),\n          transactions: parseInt(row.transactions),\n          change: parseFloat(row.price_change),\n          changePercent: parseFloat(row.change_percent)\n        },\n        aiAnalysis: {\n          sentiment: row.sentiment,\n          riskScore: row.risk_score,\n          pricePrediction: parseFloat(row.price_prediction),\n          recommendations: row.recommendations,\n          analysis: row.full_analysis,\n          model: row.model_used\n        }\n      };\n    } catch (error) {\n      console.error('Error fetching latest stock data:', error);\n      throw error;\n    }\n  }\n  async getLatestStockData() {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return this.mockData.latest;\n  }\n  async getHistoricalData(days = 30) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return this.mockData.historical;\n  }\n  async getAllRecommendations() {\n    await new Promise(resolve => setTimeout(resolve, 400));\n    return this.mockData.recommendations;\n  }\n  async getPerformanceMetrics() {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return this.mockData.metrics;\n  }\n}\n\n// Export singleton instance\nconst databaseService = new DatabaseService();\nexport default databaseService;","map":{"version":3,"names":["Client","require","DatabaseService","constructor","connectionString","client","connect","Error","ssl","rejectUnauthorized","console","log","error","disconnect","end","getLatestStockData","query","result","rows","length","row","id","date","symbol","stockData","open","parseFloat","open_price","close","close_price","high","high_price","low","low_price","volume","parseInt","vwap","transactions","change","price_change","changePercent","change_percent","aiAnalysis","sentiment","riskScore","risk_score","pricePrediction","price_prediction","recommendations","analysis","full_analysis","model","model_used","Promise","resolve","setTimeout","mockData","latest","getHistoricalData","days","historical","getAllRecommendations","getPerformanceMetrics","metrics","databaseService"],"sources":["C:/Users/Deepak Thirukkumaran/OneDrive/Desktop/stealth/finpipe/dashboard/src/services/database.js"],"sourcesContent":["const { Client } = require('pg');\r\n\r\nclass DatabaseService {\r\n  constructor() {\r\n    // Railway PostgreSQL connection string - hardcoded for deployment\r\n    this.connectionString = 'postgresql://postgres:vDfzLbuvZxfVjUUgNInZPsHSidoCtHkD@interchange.proxy.rlwy.net:57621/railway';\r\n    this.client = null;\r\n  }\r\n\r\n  async connect() {\r\n    if (!this.connectionString) {\r\n      throw new Error('Database URL not provided. Set REACT_APP_DATABASE_URL environment variable.');\r\n    }\r\n\r\n    try {\r\n      this.client = new Client({\r\n        connectionString: this.connectionString,\r\n        ssl: {\r\n          rejectUnauthorized: false // Required for Railway PostgreSQL\r\n        }\r\n      });\r\n\r\n      await this.client.connect();\r\n      console.log('Connected to PostgreSQL database');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Database connection failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async disconnect() {\r\n    if (this.client) {\r\n      await this.client.end();\r\n      this.client = null;\r\n    }\r\n  }\r\n\r\n  async getLatestStockData() {\r\n    /**\r\n     * Get the most recent stock data with AI analysis\r\n     * Returns: Combined stock metrics and AI recommendations\r\n     */\r\n    try {\r\n      if (!this.client) await this.connect();\r\n\r\n      const query = `\r\n        SELECT \r\n          dm.id,\r\n          dm.date,\r\n          dm.symbol,\r\n          dm.open_price,\r\n          dm.close_price,\r\n          dm.high_price,\r\n          dm.low_price,\r\n          dm.volume,\r\n          dm.vwap,\r\n          dm.transactions,\r\n          ar.sentiment,\r\n          ar.risk_score,\r\n          ar.price_prediction,\r\n          ar.recommendations,\r\n          ar.full_analysis,\r\n          ar.model_used,\r\n          (dm.close_price - dm.open_price) as price_change,\r\n          ((dm.close_price - dm.open_price) / dm.open_price * 100) as change_percent\r\n        FROM daily_metrics dm\r\n        LEFT JOIN ai_recommendations ar ON dm.id = ar.metrics_id\r\n        ORDER BY dm.date DESC, dm.id DESC\r\n        LIMIT 1\r\n      `;\r\n\r\n      const result = await this.client.query(query);\r\n      \r\n      if (result.rows.length === 0) {\r\n        return null;\r\n      }\r\n\r\n      const row = result.rows[0];\r\n      return {\r\n        id: row.id,\r\n        date: row.date,\r\n        symbol: row.symbol,\r\n        stockData: {\r\n          open: parseFloat(row.open_price),\r\n          close: parseFloat(row.close_price),\r\n          high: parseFloat(row.high_price),\r\n          low: parseFloat(row.low_price),\r\n          volume: parseInt(row.volume),\r\n          vwap: parseFloat(row.vwap),\r\n          transactions: parseInt(row.transactions),\r\n          change: parseFloat(row.price_change),\r\n          changePercent: parseFloat(row.change_percent)\r\n        },\r\n        aiAnalysis: {\r\n          sentiment: row.sentiment,\r\n          riskScore: row.risk_score,\r\n          pricePrediction: parseFloat(row.price_prediction),\r\n          recommendations: row.recommendations,\r\n          analysis: row.full_analysis,\r\n          model: row.model_used\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('Error fetching latest stock data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getLatestStockData() {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    return this.mockData.latest;\r\n  }\r\n\r\n  async getHistoricalData(days = 30) {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return this.mockData.historical;\r\n  }\r\n\r\n  async getAllRecommendations() {\r\n    await new Promise(resolve => setTimeout(resolve, 400));\r\n    return this.mockData.recommendations;\r\n  }\r\n\r\n  async getPerformanceMetrics() {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return this.mockData.metrics;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nconst databaseService = new DatabaseService();\r\nexport default databaseService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}